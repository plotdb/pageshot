// Generated by LiveScript 1.3.1
var fs, express, bodyParser, puppeteer, colors, locale, screenshot;
fs = require('fs');
express = require('express');
bodyParser = require('body-parser');
puppeteer = require('puppeteer');
colors = require('colors');
locale = {};
screenshot = function(opt){
  var ref$;
  opt == null && (opt = {});
  this.opt = opt;
  this.count = (ref$ = opt.count || 4) < 20 ? ref$ : 20;
  this.queue = [];
  return this;
};
screenshot.prototype = import$(Object.create(Object.prototype), {
  get: function(){
    var this$ = this;
    return new Promise(function(res, rej){
      var i$, to$, i;
      for (i$ = 0, to$ = this$.count; i$ < to$; ++i$) {
        i = i$;
        console.log(">", this$.pages[i]);
        if (!this$.pages[i].busy) {
          this$.pages[i].busy = true;
          return res(this$.pages[i]);
        }
      }
      return this$.queue.push({
        res: res,
        rej: rej
      });
    });
  },
  free: function(obj){
    var ret;
    if (this.queue.length) {
      ret = this.queue.splice(0, 1)[0];
      return ret.res(obj);
    } else {
      return obj.busy = false;
    }
  },
  init: function(){
    var that, this$ = this;
    return ((that = locale.browser)
      ? Promise.resolve(that)
      : puppeteer.launch()).then(function(browser){
      var i;
      locale.browser = browser;
      return Promise.all((function(){
        var i$, to$, results$ = [];
        for (i$ = 0, to$ = this.count; i$ < to$; ++i$) {
          i = i$;
          results$.push(browser.newPage().then(fn$));
        }
        return results$;
        function fn$(it){
          return {
            busy: false,
            page: it
          };
        }
      }.call(this$)));
    }).then(function(it){
      return this$.pages = it;
    });
  }
});
module.exports = screenshot;
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
